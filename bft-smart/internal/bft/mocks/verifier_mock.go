// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	types "github.com/hyperledger-labs/SmartBFT/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// VerifierMock is an autogenerated mock type for the VerifierMock type
type VerifierMock struct {
	mock.Mock
}

// AuxiliaryData provides a mock function with given fields: _a0
func (_m *VerifierMock) AuxiliaryData(_a0 []byte) []byte {
	ret := _m.Called(_a0)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// RequestsFromProposal provides a mock function with given fields: proposal
func (_m *VerifierMock) RequestsFromProposal(proposal types.Proposal) []types.RequestInfo {
	ret := _m.Called(proposal)

	var r0 []types.RequestInfo
	if rf, ok := ret.Get(0).(func(types.Proposal) []types.RequestInfo); ok {
		r0 = rf(proposal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.RequestInfo)
		}
	}

	return r0
}

// VerificationSequence provides a mock function with given fields:
func (_m *VerifierMock) VerificationSequence() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// VerifyConsenterSig provides a mock function with given fields: signature, prop
func (_m *VerifierMock) VerifyConsenterSig(signature types.Signature, prop types.Proposal) ([]byte, error) {
	ret := _m.Called(signature, prop)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(types.Signature, types.Proposal) []byte); ok {
		r0 = rf(signature, prop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Signature, types.Proposal) error); ok {
		r1 = rf(signature, prop)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyProposal provides a mock function with given fields: proposal
func (_m *VerifierMock) VerifyProposal(proposal types.Proposal) ([]types.RequestInfo, error) {
	ret := _m.Called(proposal)

	var r0 []types.RequestInfo
	if rf, ok := ret.Get(0).(func(types.Proposal) []types.RequestInfo); ok {
		r0 = rf(proposal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.RequestInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Proposal) error); ok {
		r1 = rf(proposal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyRequest provides a mock function with given fields: val
func (_m *VerifierMock) VerifyRequest(val []byte) (types.RequestInfo, error) {
	ret := _m.Called(val)

	var r0 types.RequestInfo
	if rf, ok := ret.Get(0).(func([]byte) types.RequestInfo); ok {
		r0 = rf(val)
	} else {
		r0 = ret.Get(0).(types.RequestInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(val)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifySignature provides a mock function with given fields: signature
func (_m *VerifierMock) VerifySignature(signature types.Signature) error {
	ret := _m.Called(signature)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Signature) error); ok {
		r0 = rf(signature)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
