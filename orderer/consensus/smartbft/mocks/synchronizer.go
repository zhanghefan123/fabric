// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "github.com/hyperledger-labs/SmartBFT/pkg/types"
)

// Synchronizer is an autogenerated mock type for the synchronizer type
type Synchronizer struct {
	mock.Mock
}

type Synchronizer_Expecter struct {
	mock *mock.Mock
}

func (_m *Synchronizer) EXPECT() *Synchronizer_Expecter {
	return &Synchronizer_Expecter{mock: &_m.Mock}
}

// Sync provides a mock function with given fields:
func (_m *Synchronizer) Sync() types.SyncResponse {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sync")
	}

	var r0 types.SyncResponse
	if rf, ok := ret.Get(0).(func() types.SyncResponse); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.SyncResponse)
	}

	return r0
}

// Synchronizer_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type Synchronizer_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
func (_e *Synchronizer_Expecter) Sync() *Synchronizer_Sync_Call {
	return &Synchronizer_Sync_Call{Call: _e.mock.On("Sync")}
}

func (_c *Synchronizer_Sync_Call) Run(run func()) *Synchronizer_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Synchronizer_Sync_Call) Return(_a0 types.SyncResponse) *Synchronizer_Sync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Synchronizer_Sync_Call) RunAndReturn(run func() types.SyncResponse) *Synchronizer_Sync_Call {
	_c.Call.Return(run)
	return _c
}

// NewSynchronizer creates a new instance of Synchronizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSynchronizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Synchronizer {
	mock := &Synchronizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
